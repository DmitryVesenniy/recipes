#################################################
# создание ключа
ssh-keygen -t rsa

# получить ключ
cat ~/.ssh/id_rsa.pub

# Копируем ключь в гитХаб, гитЛаб и т.д.

##################################################
# Получить инфо про репозиторий
cat .git/config

# меняем имя пользователя
git config --global user.name "John Doe"

# Выбор редактора
git config --global core.editor nano

# Проверка настроек
git config --list

# Изменить origin url
git remote set-url origin git@github.com:OSLL/git_course_example_repo.git
git remote -v

# восстанавливает файлы на сцене, а именно копирует файлы из последнего коммита на сцену.
# Используйте эту команду для отмены изменений, внесённых командой git
git reset -- файлы

# копирует файлы со сцены в рабочую директорию.
# Эту команду удобно использовать, чтобы сбросить нежелательные изменения в рабочей директории.
#  отменяет все незакомиченные изменения в файле
git checkout -- файлы

# Перемещение файла с добавлением в индекс
git mv hello.html lib

# Удаление файлов из гита и из рабочей директории
git rm file
git rm --cached file # удаляем файл только из области индексирования “Staging Area”

# Commit
git commit -a # Зафиксировать (закоммитить) изменения во всех файлах (но файлы, которые не находятся в индексе, будут проигнорированы).
git commit Makefile # Закоммитить только изменения в Makefile, проигнорировать все другие измененные файлы.

# РАБОТА С ВЕТКАМИ
# git-checkout - позволяет переключаться между ветками (коммитами, тегами) или восстановить файлы рабочего каталога.
git checkout [options] [<branch>]/<commit>/<tag>
git checkout [options] <file_name_to_restore>

# Переход к коммиту с тегом HEAD
git checkout HEAD

# Переход к коммиту, предшествующему HEAD на 4
git checkout HEAD~4

# Найти хеш коммита с использованием git log и перейти к этому коммиту
git log --grep="Commit message fragment"
git checkout b20eb8bdb8daf5fcec3ceb191c6b9b25507376ca

# Отменить незакоммиченные изменения в файле file.txt
git checkout -- file.txt

#ветка - создать и перейти
git checkout -b name

#Просто создать
git branch name

#Перейти
git checkout name

# Объединить текущую ветку с name
git merge name